# .cursorrules — Todo-Cursor Repository

## Key Principles
- Keep files small and focused for better AI interaction and maintainability.
- Always add descriptive comments to explain intent and business rules.
- Prompt for missing files before generating code if context is insufficient.
- Implement meaningful logging for debugging and traceability.
- Use modular, reusable components to avoid duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Use lowercase with dashes for directories (e.g., components/task-item).

## Code Style & Patterns (TypeScript / React / Next.js)
- Use TypeScript for all code. Prefer interfaces over types.
- Avoid enums; use maps or union types for better flexibility.
- Write pure functions using the `function` keyword.
- Favor named exports for components and utilities.
- Follow RORO (Receive Object, Return Object) pattern for functions with multiple parameters.
- Use concise one-liners for simple conditionals (e.g., if (!task) return null).
- Use early returns to handle errors and edge cases up front. Place the happy path last.
- Avoid unnecessary else statements after return.
- Organize files: Exported Component → Subcomponents → Helpers → Types → Static Content.

## AI Assistant Behavior
- Always ask for missing files before proceeding with code generation.
- Favor small, scoped code changes for accuracy.
- Provide code with inline comments explaining logic.
- Suggest logging points for new features.
- Adhere to these rules consistently in all suggestions.


## React / Next.js 14 (App Router)
- Use functional components with TypeScript interfaces.
- Prefer declarative JSX patterns.
- Minimize use of 'use client': 
  - Use server components and SSR whenever possible.
  - Use 'use client' only for browser-specific APIs and interactive components.
- Organize static content and constants outside render functions, at the end of the file.
- Implement responsive design with TailwindCSS, following a mobile-first approach.
- Use lazy loading and Suspense for non-critical client components.
- Optimize images with next/image (WebP, lazy loading, responsive sizing).

## Error Handling & State Management
- Handle Supabase errors gracefully with user-friendly messages.
- Use guard clauses to handle invalid states early in functions.
- Prefer error boundaries (`error.tsx`, `global-error.tsx`) for unexpected errors.
- Use early returns instead of nested conditionals.
- Model expected errors as return values instead of using try/catch blocks for normal flows.

## Business Logic Guidelines
- Task Management:
  - Active tasks appear under their start date; completed tasks appear under their completion date.
  - Incomplete tasks never show on past days, they always rollover to the current day.  Completed tasks always show on the date completed.  Future tasks show based on the start date of the task.  Due date determines if they are overdue.
  - Dragging tasks between columns updates the category.  The categories are work and personal and we have a column for each under each day.
  - Dragging tasks across days updates the start date and category if applicable.  For example, you drag a task from work to personal then the category updates to personal.
  - Subtasks act as checklists within tasks. Ensure subtask completion syncs with parent task.
- Data Persistence:
  - Use Supabase for data storage. Fallback to localStorage for offline/demo mode.
- Decision Matrix:
  - Support full CRUD with offline fallback.
- Prepare for future enhancements: Dashboard, Sticky Notes, Daily Rituals.

#Alter Ego
This is the alter ego section of the app.  In this section, you can create alter egos and assign prompts to them.  Users create alter egos, define their super powers and other properties, upload a photo and then they can initiate a chat with the alter ego.

Behind the scenes, the alter ego is powered by an LLM Chatbot.
We are feeding it the entire chat conversation and prompting it to act like the alter ego the user is impersonating.

A sample prompt for the alter ego discussion is below for Nelson Mandela.

I want you to become Nelson Mandela.  
I'm going to have a conversation with you and I want you to answer in short 1-3 sentence answers as if you are Nelson Mandela.  
I want you to speak like he would, with the same wording and patterns that he would.  I also want you to use your vast knowledge of Nelson and sprinkle in examples from Nelson's life that could be words of wisdom to 
men based on the problem or limiting belief I'm having.  Please give specific examples from Nelson's past.  I'm going to ask a series of 
questions or comments and then I want you to reply as if you are Nelson. 
 Please stay productive and positive and try to show examples of how you have had a similar experience and 
 how you overcame it.

