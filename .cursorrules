# .cursorrules — Todo-Cursor Repository

## Key Principles
- Keep files small and focused for better AI interaction and maintainability.
- Always add descriptive comments to explain intent and business rules.
- Prompt for missing files before generating code if context is insufficient.
- Implement meaningful logging for debugging and traceability.
- Use modular, reusable components to avoid duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Use lowercase with dashes for directories (e.g., components/task-item).

## Code Style & Patterns (TypeScript / React / Next.js)
- Use TypeScript for all code. Prefer interfaces over types.
- Avoid enums; use maps or union types for better flexibility.
- Write pure functions using the `function` keyword.
- Favor named exports for components and utilities.
- Follow RORO (Receive Object, Return Object) pattern for functions with multiple parameters.
- Use concise one-liners for simple conditionals (e.g., if (!task) return null).
- Use early returns to handle errors and edge cases up front. Place the happy path last.
- Avoid unnecessary else statements after return.
- Organize files: Exported Component → Subcomponents → Helpers → Types → Static Content.

## React / Next.js 14 (App Router)
- Use functional components with TypeScript interfaces.
- Prefer declarative JSX patterns.
- Minimize use of 'use client': 
  - Use server components and SSR whenever possible.
  - Use 'use client' only for browser-specific APIs and interactive components.
- Organize static content and constants outside render functions, at the end of the file.
- Implement responsive design with TailwindCSS, following a mobile-first approach.
- Use lazy loading and Suspense for non-critical client components.
- Optimize images with next/image (WebP, lazy loading, responsive sizing).

## Error Handling & State Management
- Handle Supabase errors gracefully with user-friendly messages.
- Use guard clauses to handle invalid states early in functions.
- Prefer error boundaries (`error.tsx`, `global-error.tsx`) for unexpected errors.
- Use early returns instead of nested conditionals.
- Model expected errors as return values instead of using try/catch blocks for normal flows.

## Business Logic Guidelines
- Task Management:
  - Active tasks appear under their start date; completed tasks appear under their completion date.
  - Incomplete tasks never show on past days, they always rollover to the current day.  Completed tasks always show on the date completed.  Future tasks show based on the start date of the task.  Due date determines if they are overdue.
  - Dragging tasks between columns updates the category.  The categories are work and personal and we have a column for each under each day.
  - Dragging tasks across days updates the start date and category if applicable.  For example, you drag a task from work to personal then the category updates to personal.
  - Subtasks act as checklists within tasks. Ensure subtask completion syncs with parent task.
- Data Persistence:
  - Use Supabase for data storage. Fallback to localStorage for offline/demo mode.
- Decision Matrix:
  - Support full CRUD with offline fallback.
- Prepare for future enhancements: Dashboard, Sticky Notes, Daily Rituals.

## AI Assistant Behavior
- Always ask for missing files before proceeding with code generation.
- Favor small, scoped code changes for accuracy.
- Provide code with inline comments explaining logic.
- Suggest logging points for new features.
- Adhere to these rules consistently in all suggestions.
